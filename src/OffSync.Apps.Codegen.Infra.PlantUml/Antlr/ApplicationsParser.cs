//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Applications.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace OffSync.Apps.Codegen.Infra.PlantUml.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class ApplicationsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		START_UML=1, END_UML=2, TITLE=3, OPEN_BRACE=4, CLOSE_BRACE=5, OPEN_PARENS=6, 
		CLOSE_PARENS=7, OPEN_BRACKET=8, CLOSE_BRACKET=9, COMMA=10, DOT=11, NAMESPACE=12, 
		DOMAIN=13, CLASS=14, COMMANDS=15, COMMAND=16, MODEL=17, RESULT=18, REQUIRED_BY=19, 
		CONFIG=20, QUERIES=21, QUERY=22, INTERFACES=23, INTERFACE=24, VOID=25, 
		BOOL=26, DATETIME=27, INT=28, STRING=29, IENUMERABLE=30, IQUERYABLE=31, 
		NULLABLE=32, ID=33, PARAMETER_NAME=34, WS=35;
	public const int
		RULE_application = 0, RULE_title = 1, RULE_aggregateRoots = 2, RULE_aggregateRoot = 3, 
		RULE_domain = 4, RULE_classDefs = 5, RULE_classDef = 6, RULE_classBody = 7, 
		RULE_properties = 8, RULE_property = 9, RULE_commands = 10, RULE_command = 11, 
		RULE_commandClassDef = 12, RULE_modelClassDef = 13, RULE_resultClassDef = 14, 
		RULE_dependencies = 15, RULE_dependency = 16, RULE_configClassDef = 17, 
		RULE_queries = 18, RULE_query = 19, RULE_queryClassDef = 20, RULE_interfaces = 21, 
		RULE_interfaceDefs = 22, RULE_interfaceDef = 23, RULE_methods = 24, RULE_method = 25, 
		RULE_typeOrVoid = 26, RULE_parameters = 27, RULE_parameter = 28, RULE_type = 29, 
		RULE_dataType = 30, RULE_nullableDataType = 31, RULE_typeArguments = 32, 
		RULE_qualifiedId = 33, RULE_id = 34, RULE_parameterName = 35;
	public static readonly string[] ruleNames = {
		"application", "title", "aggregateRoots", "aggregateRoot", "domain", "classDefs", 
		"classDef", "classBody", "properties", "property", "commands", "command", 
		"commandClassDef", "modelClassDef", "resultClassDef", "dependencies", 
		"dependency", "configClassDef", "queries", "query", "queryClassDef", "interfaces", 
		"interfaceDefs", "interfaceDef", "methods", "method", "typeOrVoid", "parameters", 
		"parameter", "type", "dataType", "nullableDataType", "typeArguments", 
		"qualifiedId", "id", "parameterName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'@startuml'", "'@enduml'", "'title'", "'{'", "'}'", "'('", "')'", 
		"'<'", "'>'", "','", "'.'", "'namespace'", "'Domain'", "'class'", "'Commands'", 
		"'Command'", "'Model'", "'Result'", "'-->'", "'Config'", "'Queries'", 
		"'Query'", "'Interfaces'", "'interface'", "'void'", "'bool'", "'datetime'", 
		"'int'", "'string'", "'IEnumerable'", "'IQueryable'", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "START_UML", "END_UML", "TITLE", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_PARENS", 
		"CLOSE_PARENS", "OPEN_BRACKET", "CLOSE_BRACKET", "COMMA", "DOT", "NAMESPACE", 
		"DOMAIN", "CLASS", "COMMANDS", "COMMAND", "MODEL", "RESULT", "REQUIRED_BY", 
		"CONFIG", "QUERIES", "QUERY", "INTERFACES", "INTERFACE", "VOID", "BOOL", 
		"DATETIME", "INT", "STRING", "IENUMERABLE", "IQUERYABLE", "NULLABLE", 
		"ID", "PARAMETER_NAME", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Applications.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ApplicationsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ApplicationsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ApplicationsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ApplicationContext : ParserRuleContext {
		public ITerminalNode START_UML() { return GetToken(ApplicationsParser.START_UML, 0); }
		public TitleContext title() {
			return GetRuleContext<TitleContext>(0);
		}
		public ITerminalNode END_UML() { return GetToken(ApplicationsParser.END_UML, 0); }
		public AggregateRootsContext aggregateRoots() {
			return GetRuleContext<AggregateRootsContext>(0);
		}
		public InterfacesContext interfaces() {
			return GetRuleContext<InterfacesContext>(0);
		}
		public ApplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_application; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterApplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitApplication(this);
		}
	}

	[RuleVersion(0)]
	public ApplicationContext application() {
		ApplicationContext _localctx = new ApplicationContext(Context, State);
		EnterRule(_localctx, 0, RULE_application);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(START_UML);
			State = 73; title();
			{
			State = 74; aggregateRoots();
			}
			{
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAMESPACE) {
				{
				State = 75; interfaces();
				}
			}

			}
			State = 78; Match(END_UML);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TitleContext : ParserRuleContext {
		public QualifiedIdContext title_;
		public ITerminalNode TITLE() { return GetToken(ApplicationsParser.TITLE, 0); }
		public QualifiedIdContext qualifiedId() {
			return GetRuleContext<QualifiedIdContext>(0);
		}
		public TitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_title; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterTitle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitTitle(this);
		}
	}

	[RuleVersion(0)]
	public TitleContext title() {
		TitleContext _localctx = new TitleContext(Context, State);
		EnterRule(_localctx, 2, RULE_title);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(TITLE);
			{
			State = 81; _localctx.title_ = qualifiedId();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateRootsContext : ParserRuleContext {
		public AggregateRootContext[] aggregateRoot() {
			return GetRuleContexts<AggregateRootContext>();
		}
		public AggregateRootContext aggregateRoot(int i) {
			return GetRuleContext<AggregateRootContext>(i);
		}
		public AggregateRootsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateRoots; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterAggregateRoots(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitAggregateRoots(this);
		}
	}

	[RuleVersion(0)]
	public AggregateRootsContext aggregateRoots() {
		AggregateRootsContext _localctx = new AggregateRootsContext(Context, State);
		EnterRule(_localctx, 4, RULE_aggregateRoots);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 83; aggregateRoot();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 86;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateRootContext : ParserRuleContext {
		public IdContext name_;
		public ITerminalNode NAMESPACE() { return GetToken(ApplicationsParser.NAMESPACE, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(ApplicationsParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(ApplicationsParser.CLOSE_BRACE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public DomainContext domain() {
			return GetRuleContext<DomainContext>(0);
		}
		public CommandsContext commands() {
			return GetRuleContext<CommandsContext>(0);
		}
		public QueriesContext queries() {
			return GetRuleContext<QueriesContext>(0);
		}
		public AggregateRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateRoot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterAggregateRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitAggregateRoot(this);
		}
	}

	[RuleVersion(0)]
	public AggregateRootContext aggregateRoot() {
		AggregateRootContext _localctx = new AggregateRootContext(Context, State);
		EnterRule(_localctx, 6, RULE_aggregateRoot);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(NAMESPACE);
			{
			State = 89; _localctx.name_ = id();
			}
			State = 90; Match(OPEN_BRACE);
			{
			State = 92;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 91; domain();
				}
				break;
			}
			}
			{
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 94; commands();
				}
				break;
			}
			}
			{
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAMESPACE) {
				{
				State = 97; queries();
				}
			}

			}
			State = 100; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DomainContext : ParserRuleContext {
		public ITerminalNode NAMESPACE() { return GetToken(ApplicationsParser.NAMESPACE, 0); }
		public ITerminalNode DOMAIN() { return GetToken(ApplicationsParser.DOMAIN, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(ApplicationsParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(ApplicationsParser.CLOSE_BRACE, 0); }
		public ClassDefsContext classDefs() {
			return GetRuleContext<ClassDefsContext>(0);
		}
		public DomainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterDomain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitDomain(this);
		}
	}

	[RuleVersion(0)]
	public DomainContext domain() {
		DomainContext _localctx = new DomainContext(Context, State);
		EnterRule(_localctx, 8, RULE_domain);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(NAMESPACE);
			State = 103; Match(DOMAIN);
			State = 104; Match(OPEN_BRACE);
			{
			State = 105; classDefs();
			}
			State = 106; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefsContext : ParserRuleContext {
		public ClassDefContext[] classDef() {
			return GetRuleContexts<ClassDefContext>();
		}
		public ClassDefContext classDef(int i) {
			return GetRuleContext<ClassDefContext>(i);
		}
		public ClassDefsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterClassDefs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitClassDefs(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefsContext classDefs() {
		ClassDefsContext _localctx = new ClassDefsContext(Context, State);
		EnterRule(_localctx, 10, RULE_classDefs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 108; classDef();
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CLASS );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		public IdContext name_;
		public ITerminalNode CLASS() { return GetToken(ApplicationsParser.CLASS, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 12, RULE_classDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(CLASS);
			{
			State = 114; _localctx.name_ = id();
			}
			State = 115; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(ApplicationsParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(ApplicationsParser.CLOSE_BRACE, 0); }
		public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 14, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(OPEN_BRACE);
			{
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOMAIN) | (1L << INTERFACES) | (1L << BOOL) | (1L << DATETIME) | (1L << INT) | (1L << STRING) | (1L << IENUMERABLE) | (1L << IQUERYABLE) | (1L << ID))) != 0)) {
				{
				State = 118; properties();
				}
			}

			}
			State = 121; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertiesContext : ParserRuleContext {
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public PropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_properties; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitProperties(this);
		}
	}

	[RuleVersion(0)]
	public PropertiesContext properties() {
		PropertiesContext _localctx = new PropertiesContext(Context, State);
		EnterRule(_localctx, 16, RULE_properties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 123; property();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOMAIN) | (1L << INTERFACES) | (1L << BOOL) | (1L << DATETIME) | (1L << INT) | (1L << STRING) | (1L << IENUMERABLE) | (1L << IQUERYABLE) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public IdContext name_;
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 18, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 128; type(0);
			}
			{
			State = 129; _localctx.name_ = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandsContext : ParserRuleContext {
		public ITerminalNode NAMESPACE() { return GetToken(ApplicationsParser.NAMESPACE, 0); }
		public ITerminalNode COMMANDS() { return GetToken(ApplicationsParser.COMMANDS, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(ApplicationsParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(ApplicationsParser.CLOSE_BRACE, 0); }
		public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public CommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commands; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitCommands(this);
		}
	}

	[RuleVersion(0)]
	public CommandsContext commands() {
		CommandsContext _localctx = new CommandsContext(Context, State);
		EnterRule(_localctx, 20, RULE_commands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(NAMESPACE);
			State = 132; Match(COMMANDS);
			State = 133; Match(OPEN_BRACE);
			{
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 134; command();
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAMESPACE );
			}
			State = 139; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public IdContext name_;
		public ITerminalNode NAMESPACE() { return GetToken(ApplicationsParser.NAMESPACE, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(ApplicationsParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(ApplicationsParser.CLOSE_BRACE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public CommandClassDefContext commandClassDef() {
			return GetRuleContext<CommandClassDefContext>(0);
		}
		public ModelClassDefContext modelClassDef() {
			return GetRuleContext<ModelClassDefContext>(0);
		}
		public ResultClassDefContext resultClassDef() {
			return GetRuleContext<ResultClassDefContext>(0);
		}
		public DependenciesContext dependencies() {
			return GetRuleContext<DependenciesContext>(0);
		}
		public ConfigClassDefContext configClassDef() {
			return GetRuleContext<ConfigClassDefContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 22, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(NAMESPACE);
			{
			State = 142; _localctx.name_ = id();
			}
			State = 143; Match(OPEN_BRACE);
			{
			State = 145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 144; commandClassDef();
				}
				break;
			}
			}
			{
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 147; modelClassDef();
				}
				break;
			}
			}
			{
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 150; resultClassDef();
				}
				break;
			}
			}
			{
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOMAIN) | (1L << INTERFACES) | (1L << ID))) != 0)) {
				{
				State = 153; dependencies();
				}
			}

			}
			{
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLASS) {
				{
				State = 156; configClassDef();
				}
			}

			}
			State = 159; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandClassDefContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(ApplicationsParser.CLASS, 0); }
		public ITerminalNode COMMAND() { return GetToken(ApplicationsParser.COMMAND, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public CommandClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandClassDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterCommandClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitCommandClassDef(this);
		}
	}

	[RuleVersion(0)]
	public CommandClassDefContext commandClassDef() {
		CommandClassDefContext _localctx = new CommandClassDefContext(Context, State);
		EnterRule(_localctx, 24, RULE_commandClassDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(CLASS);
			State = 162; Match(COMMAND);
			State = 163; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelClassDefContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(ApplicationsParser.CLASS, 0); }
		public ITerminalNode MODEL() { return GetToken(ApplicationsParser.MODEL, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ModelClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelClassDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterModelClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitModelClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ModelClassDefContext modelClassDef() {
		ModelClassDefContext _localctx = new ModelClassDefContext(Context, State);
		EnterRule(_localctx, 26, RULE_modelClassDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(CLASS);
			State = 166; Match(MODEL);
			State = 167; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultClassDefContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(ApplicationsParser.CLASS, 0); }
		public ITerminalNode RESULT() { return GetToken(ApplicationsParser.RESULT, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ResultClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultClassDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterResultClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitResultClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ResultClassDefContext resultClassDef() {
		ResultClassDefContext _localctx = new ResultClassDefContext(Context, State);
		EnterRule(_localctx, 28, RULE_resultClassDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(CLASS);
			State = 170; Match(RESULT);
			State = 171; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DependenciesContext : ParserRuleContext {
		public DependencyContext[] dependency() {
			return GetRuleContexts<DependencyContext>();
		}
		public DependencyContext dependency(int i) {
			return GetRuleContext<DependencyContext>(i);
		}
		public DependenciesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dependencies; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterDependencies(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitDependencies(this);
		}
	}

	[RuleVersion(0)]
	public DependenciesContext dependencies() {
		DependenciesContext _localctx = new DependenciesContext(Context, State);
		EnterRule(_localctx, 30, RULE_dependencies);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 173; dependency();
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOMAIN) | (1L << INTERFACES) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DependencyContext : ParserRuleContext {
		public QualifiedIdContext type_;
		public ITerminalNode REQUIRED_BY() { return GetToken(ApplicationsParser.REQUIRED_BY, 0); }
		public ITerminalNode COMMAND() { return GetToken(ApplicationsParser.COMMAND, 0); }
		public ITerminalNode QUERY() { return GetToken(ApplicationsParser.QUERY, 0); }
		public QualifiedIdContext qualifiedId() {
			return GetRuleContext<QualifiedIdContext>(0);
		}
		public DependencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dependency; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterDependency(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitDependency(this);
		}
	}

	[RuleVersion(0)]
	public DependencyContext dependency() {
		DependencyContext _localctx = new DependencyContext(Context, State);
		EnterRule(_localctx, 32, RULE_dependency);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 178; _localctx.type_ = qualifiedId();
			}
			State = 179; Match(REQUIRED_BY);
			State = 180;
			_la = TokenStream.LA(1);
			if ( !(_la==COMMAND || _la==QUERY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigClassDefContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(ApplicationsParser.CLASS, 0); }
		public ITerminalNode CONFIG() { return GetToken(ApplicationsParser.CONFIG, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ConfigClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configClassDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterConfigClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitConfigClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ConfigClassDefContext configClassDef() {
		ConfigClassDefContext _localctx = new ConfigClassDefContext(Context, State);
		EnterRule(_localctx, 34, RULE_configClassDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(CLASS);
			State = 183; Match(CONFIG);
			State = 184; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueriesContext : ParserRuleContext {
		public ITerminalNode NAMESPACE() { return GetToken(ApplicationsParser.NAMESPACE, 0); }
		public ITerminalNode QUERIES() { return GetToken(ApplicationsParser.QUERIES, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(ApplicationsParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(ApplicationsParser.CLOSE_BRACE, 0); }
		public QueryContext[] query() {
			return GetRuleContexts<QueryContext>();
		}
		public QueryContext query(int i) {
			return GetRuleContext<QueryContext>(i);
		}
		public QueriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queries; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterQueries(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitQueries(this);
		}
	}

	[RuleVersion(0)]
	public QueriesContext queries() {
		QueriesContext _localctx = new QueriesContext(Context, State);
		EnterRule(_localctx, 36, RULE_queries);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(NAMESPACE);
			State = 187; Match(QUERIES);
			State = 188; Match(OPEN_BRACE);
			{
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 189; query();
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAMESPACE );
			}
			State = 194; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		public IdContext name_;
		public ITerminalNode NAMESPACE() { return GetToken(ApplicationsParser.NAMESPACE, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(ApplicationsParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(ApplicationsParser.CLOSE_BRACE, 0); }
		public ResultClassDefContext resultClassDef() {
			return GetRuleContext<ResultClassDefContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public QueryClassDefContext queryClassDef() {
			return GetRuleContext<QueryClassDefContext>(0);
		}
		public ModelClassDefContext modelClassDef() {
			return GetRuleContext<ModelClassDefContext>(0);
		}
		public DependenciesContext dependencies() {
			return GetRuleContext<DependenciesContext>(0);
		}
		public ConfigClassDefContext configClassDef() {
			return GetRuleContext<ConfigClassDefContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 38, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(NAMESPACE);
			{
			State = 197; _localctx.name_ = id();
			}
			State = 198; Match(OPEN_BRACE);
			{
			State = 200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 199; queryClassDef();
				}
				break;
			}
			}
			{
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 202; modelClassDef();
				}
				break;
			}
			}
			{
			State = 205; resultClassDef();
			}
			{
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOMAIN) | (1L << INTERFACES) | (1L << ID))) != 0)) {
				{
				State = 206; dependencies();
				}
			}

			}
			{
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLASS) {
				{
				State = 209; configClassDef();
				}
			}

			}
			State = 212; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryClassDefContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(ApplicationsParser.CLASS, 0); }
		public ITerminalNode QUERY() { return GetToken(ApplicationsParser.QUERY, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public QueryClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryClassDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterQueryClassDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitQueryClassDef(this);
		}
	}

	[RuleVersion(0)]
	public QueryClassDefContext queryClassDef() {
		QueryClassDefContext _localctx = new QueryClassDefContext(Context, State);
		EnterRule(_localctx, 40, RULE_queryClassDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(CLASS);
			State = 215; Match(QUERY);
			State = 216; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfacesContext : ParserRuleContext {
		public ITerminalNode NAMESPACE() { return GetToken(ApplicationsParser.NAMESPACE, 0); }
		public ITerminalNode INTERFACES() { return GetToken(ApplicationsParser.INTERFACES, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(ApplicationsParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(ApplicationsParser.CLOSE_BRACE, 0); }
		public InterfaceDefsContext interfaceDefs() {
			return GetRuleContext<InterfaceDefsContext>(0);
		}
		public InterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterInterfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitInterfaces(this);
		}
	}

	[RuleVersion(0)]
	public InterfacesContext interfaces() {
		InterfacesContext _localctx = new InterfacesContext(Context, State);
		EnterRule(_localctx, 42, RULE_interfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(NAMESPACE);
			State = 219; Match(INTERFACES);
			State = 220; Match(OPEN_BRACE);
			{
			State = 221; interfaceDefs();
			}
			State = 222; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDefsContext : ParserRuleContext {
		public InterfaceDefContext[] interfaceDef() {
			return GetRuleContexts<InterfaceDefContext>();
		}
		public InterfaceDefContext interfaceDef(int i) {
			return GetRuleContext<InterfaceDefContext>(i);
		}
		public InterfaceDefsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDefs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterInterfaceDefs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitInterfaceDefs(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDefsContext interfaceDefs() {
		InterfaceDefsContext _localctx = new InterfaceDefsContext(Context, State);
		EnterRule(_localctx, 44, RULE_interfaceDefs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 224; interfaceDef();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==INTERFACE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDefContext : ParserRuleContext {
		public IdContext name_;
		public ITerminalNode INTERFACE() { return GetToken(ApplicationsParser.INTERFACE, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(ApplicationsParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(ApplicationsParser.CLOSE_BRACE, 0); }
		public MethodsContext methods() {
			return GetRuleContext<MethodsContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public InterfaceDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterInterfaceDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitInterfaceDef(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDefContext interfaceDef() {
		InterfaceDefContext _localctx = new InterfaceDefContext(Context, State);
		EnterRule(_localctx, 46, RULE_interfaceDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(INTERFACE);
			{
			State = 230; _localctx.name_ = id();
			}
			State = 231; Match(OPEN_BRACE);
			{
			State = 232; methods();
			}
			State = 233; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodsContext : ParserRuleContext {
		public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public MethodsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methods; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterMethods(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitMethods(this);
		}
	}

	[RuleVersion(0)]
	public MethodsContext methods() {
		MethodsContext _localctx = new MethodsContext(Context, State);
		EnterRule(_localctx, 48, RULE_methods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 235; method();
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOMAIN) | (1L << INTERFACES) | (1L << VOID) | (1L << BOOL) | (1L << DATETIME) | (1L << INT) | (1L << STRING) | (1L << IENUMERABLE) | (1L << IQUERYABLE) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public TypeOrVoidContext returnType_;
		public IdContext name_;
		public ITerminalNode OPEN_PARENS() { return GetToken(ApplicationsParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(ApplicationsParser.CLOSE_PARENS, 0); }
		public TypeOrVoidContext typeOrVoid() {
			return GetRuleContext<TypeOrVoidContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 50, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 240; _localctx.returnType_ = typeOrVoid();
			}
			{
			State = 241; _localctx.name_ = id();
			}
			State = 242; Match(OPEN_PARENS);
			{
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOMAIN) | (1L << INTERFACES) | (1L << BOOL) | (1L << DATETIME) | (1L << INT) | (1L << STRING) | (1L << IENUMERABLE) | (1L << IQUERYABLE) | (1L << ID))) != 0)) {
				{
				State = 243; parameters();
				}
			}

			}
			State = 246; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOrVoidContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(ApplicationsParser.VOID, 0); }
		public TypeOrVoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOrVoid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterTypeOrVoid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitTypeOrVoid(this);
		}
	}

	[RuleVersion(0)]
	public TypeOrVoidContext typeOrVoid() {
		TypeOrVoidContext _localctx = new TypeOrVoidContext(Context, State);
		EnterRule(_localctx, 52, RULE_typeOrVoid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOMAIN:
			case INTERFACES:
			case BOOL:
			case DATETIME:
			case INT:
			case STRING:
			case IENUMERABLE:
			case IQUERYABLE:
			case ID:
				{
				State = 248; type(0);
				}
				break;
			case VOID:
				{
				State = 249; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ApplicationsParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ApplicationsParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 54, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; parameter();
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 253; Match(COMMA);
				State = 254; parameter();
				}
				}
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ParameterNameContext name_;
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterNameContext parameterName() {
			return GetRuleContext<ParameterNameContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 56, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 260; type(0);
			}
			{
			State = 261; _localctx.name_ = parameterName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleTypeContext : TypeContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public SimpleTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
	}
	public partial class GenericTypeContext : TypeContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(ApplicationsParser.OPEN_BRACKET, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(ApplicationsParser.CLOSE_BRACKET, 0); }
		public GenericTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterGenericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitGenericType(this);
		}
	}
	public partial class NullableSimpleTypeContext : TypeContext {
		public NullableDataTypeContext nullableDataType() {
			return GetRuleContext<NullableDataTypeContext>(0);
		}
		public NullableSimpleTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterNullableSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitNullableSimpleType(this);
		}
	}
	public partial class ReferenceTypeContext : TypeContext {
		public QualifiedIdContext qualifiedId() {
			return GetRuleContext<QualifiedIdContext>(0);
		}
		public ReferenceTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitReferenceType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				_localctx = new SimpleTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 264; dataType();
				}
				break;
			case 2:
				{
				_localctx = new NullableSimpleTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 265; nullableDataType();
				}
				break;
			case 3:
				{
				_localctx = new ReferenceTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 266; qualifiedId();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 276;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new GenericTypeContext(new TypeContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 269;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 270; Match(OPEN_BRACKET);
					State = 271; typeArguments();
					State = 272; Match(CLOSE_BRACKET);
					}
					} 
				}
				State = 278;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(ApplicationsParser.BOOL, 0); }
		public ITerminalNode DATETIME() { return GetToken(ApplicationsParser.DATETIME, 0); }
		public ITerminalNode INT() { return GetToken(ApplicationsParser.INT, 0); }
		public ITerminalNode STRING() { return GetToken(ApplicationsParser.STRING, 0); }
		public ITerminalNode IENUMERABLE() { return GetToken(ApplicationsParser.IENUMERABLE, 0); }
		public ITerminalNode IQUERYABLE() { return GetToken(ApplicationsParser.IQUERYABLE, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_dataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << DATETIME) | (1L << INT) | (1L << STRING) | (1L << IENUMERABLE) | (1L << IQUERYABLE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableDataTypeContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ITerminalNode NULLABLE() { return GetToken(ApplicationsParser.NULLABLE, 0); }
		public NullableDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableDataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterNullableDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitNullableDataType(this);
		}
	}

	[RuleVersion(0)]
	public NullableDataTypeContext nullableDataType() {
		NullableDataTypeContext _localctx = new NullableDataTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_nullableDataType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; dataType();
			State = 282; Match(NULLABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ApplicationsParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ApplicationsParser.COMMA, i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 64, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; type(0);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 285; Match(COMMA);
				State = 286; type(0);
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(ApplicationsParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(ApplicationsParser.DOT, i);
		}
		public QualifiedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterQualifiedId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitQualifiedId(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdContext qualifiedId() {
		QualifiedIdContext _localctx = new QualifiedIdContext(Context, State);
		EnterRule(_localctx, 66, RULE_qualifiedId);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; id();
			State = 297;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 293; Match(DOT);
					State = 294; id();
					}
					} 
				}
				State = 299;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ApplicationsParser.ID, 0); }
		public ITerminalNode DOMAIN() { return GetToken(ApplicationsParser.DOMAIN, 0); }
		public ITerminalNode INTERFACES() { return GetToken(ApplicationsParser.INTERFACES, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 68, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DOMAIN) | (1L << INTERFACES) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterNameContext : ParserRuleContext {
		public ITerminalNode PARAMETER_NAME() { return GetToken(ApplicationsParser.PARAMETER_NAME, 0); }
		public ParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.EnterParameterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IApplicationsListener typedListener = listener as IApplicationsListener;
			if (typedListener != null) typedListener.ExitParameterName(this);
		}
	}

	[RuleVersion(0)]
	public ParameterNameContext parameterName() {
		ParameterNameContext _localctx = new ParameterNameContext(Context, State);
		EnterRule(_localctx, 70, RULE_parameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; Match(PARAMETER_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 29: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '%', '\x133', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 'O', '\n', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x6', '\x4', 'W', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 
		'X', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'_', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', '\x62', '\n', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x65', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x6', '\a', 'p', '\n', '\a', '\r', '\a', '\xE', 
		'\a', 'q', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', 'z', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x6', '\n', '\x7F', '\n', '\n', '\r', '\n', '\xE', '\n', 
		'\x80', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x6', '\f', '\x8A', '\n', '\f', '\r', '\f', 
		'\xE', '\f', '\x8B', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\x94', '\n', '\r', '\x3', '\r', 
		'\x5', '\r', '\x97', '\n', '\r', '\x3', '\r', '\x5', '\r', '\x9A', '\n', 
		'\r', '\x3', '\r', '\x5', '\r', '\x9D', '\n', '\r', '\x3', '\r', '\x5', 
		'\r', '\xA0', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x6', '\x11', '\xB1', '\n', '\x11', '\r', '\x11', 
		'\xE', '\x11', '\xB2', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x6', '\x14', '\xC1', 
		'\n', '\x14', '\r', '\x14', '\xE', '\x14', '\xC2', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\xCB', '\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\xCE', '\n', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xD2', '\n', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\xD5', '\n', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x6', '\x18', '\xE4', '\n', '\x18', '\r', '\x18', 
		'\xE', '\x18', '\xE5', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x6', '\x1A', '\xEF', 
		'\n', '\x1A', '\r', '\x1A', '\xE', '\x1A', '\xF0', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xF7', '\n', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\xFD', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', 
		'\x1D', '\x102', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x105', '\v', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x10E', '\n', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\a', '\x1F', '\x115', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x118', 
		'\v', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x122', '\n', '\"', 
		'\f', '\"', '\xE', '\"', '\x125', '\v', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\a', '#', '\x12A', '\n', '#', '\f', '#', '\xE', '#', '\x12D', 
		'\v', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x2', '\x3', '<', '&', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', '\x2', '\x5', '\x4', 
		'\x2', '\x12', '\x12', '\x18', '\x18', '\x3', '\x2', '\x1C', '!', '\x5', 
		'\x2', '\xF', '\xF', '\x19', '\x19', '#', '#', '\x2', '\x12C', '\x2', 
		'J', '\x3', '\x2', '\x2', '\x2', '\x4', 'R', '\x3', '\x2', '\x2', '\x2', 
		'\x6', 'V', '\x3', '\x2', '\x2', '\x2', '\b', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'h', '\x3', '\x2', '\x2', '\x2', '\f', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 's', '\x3', '\x2', '\x2', '\x2', '\x10', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '~', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x16', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', ' ', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xB4', '\x3', '\x2', '\x2', '\x2', '$', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xBC', '\x3', '\x2', '\x2', '\x2', '(', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xD8', '\x3', '\x2', '\x2', '\x2', ',', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', '.', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\x32', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\xF2', '\x3', '\x2', '\x2', '\x2', '\x36', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\xFE', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '<', '\x10D', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x119', '\x3', '\x2', '\x2', '\x2', '@', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x126', '\x3', '\x2', '\x2', '\x2', '\x46', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x130', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\x3', 
		'\x2', '\x2', 'K', 'L', '\x5', '\x4', '\x3', '\x2', 'L', 'N', '\x5', '\x6', 
		'\x4', '\x2', 'M', 'O', '\x5', ',', '\x17', '\x2', 'N', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'Q', '\a', '\x4', '\x2', '\x2', 'Q', '\x3', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'S', '\a', '\x5', '\x2', '\x2', 'S', 'T', '\x5', 
		'\x44', '#', '\x2', 'T', '\x5', '\x3', '\x2', '\x2', '\x2', 'U', 'W', 
		'\x5', '\b', '\x5', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 
		'X', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\a', '\xE', '\x2', '\x2', '[', '\\', '\x5', '\x46', 
		'$', '\x2', '\\', '^', '\a', '\x6', '\x2', '\x2', ']', '_', '\x5', '\n', 
		'\x6', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', 
		'\x2', '\x2', '_', '\x61', '\x3', '\x2', '\x2', '\x2', '`', '\x62', '\x5', 
		'\x16', '\f', '\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x65', '\x5', '&', '\x14', '\x2', '\x64', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\a', '\a', '\x2', '\x2', 
		'g', '\t', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\xE', '\x2', '\x2', 
		'i', 'j', '\a', '\xF', '\x2', '\x2', 'j', 'k', '\a', '\x6', '\x2', '\x2', 
		'k', 'l', '\x5', '\f', '\a', '\x2', 'l', 'm', '\a', '\a', '\x2', '\x2', 
		'm', '\v', '\x3', '\x2', '\x2', '\x2', 'n', 'p', '\x5', '\xE', '\b', '\x2', 
		'o', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 
		'q', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 
		'r', '\r', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', '\x10', '\x2', 
		'\x2', 't', 'u', '\x5', '\x46', '$', '\x2', 'u', 'v', '\x5', '\x10', '\t', 
		'\x2', 'v', '\xF', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\a', '\x6', 
		'\x2', '\x2', 'x', 'z', '\x5', '\x12', '\n', '\x2', 'y', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', 
		'\x2', '\x2', '{', '|', '\a', '\a', '\x2', '\x2', '|', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '}', '\x7F', '\x5', '\x14', '\v', '\x2', '~', '}', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x13', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', 
		'\x5', '<', '\x1F', '\x2', '\x83', '\x84', '\x5', '\x46', '$', '\x2', 
		'\x84', '\x15', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', '\xE', 
		'\x2', '\x2', '\x86', '\x87', '\a', '\x11', '\x2', '\x2', '\x87', '\x89', 
		'\a', '\x6', '\x2', '\x2', '\x88', '\x8A', '\x5', '\x18', '\r', '\x2', 
		'\x89', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8E', '\a', '\a', '\x2', '\x2', '\x8E', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x90', '\a', '\xE', '\x2', '\x2', '\x90', '\x91', 
		'\x5', '\x46', '$', '\x2', '\x91', '\x93', '\a', '\x6', '\x2', '\x2', 
		'\x92', '\x94', '\x5', '\x1A', '\xE', '\x2', '\x93', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x97', '\x5', '\x1C', '\xF', '\x2', 
		'\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x99', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9A', 
		'\x5', '\x1E', '\x10', '\x2', '\x99', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9D', '\x5', ' ', '\x11', '\x2', '\x9C', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA0', '\x5', '$', 
		'\x13', '\x2', '\x9F', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\xA2', '\a', '\a', '\x2', '\x2', '\xA2', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA4', '\a', '\x10', '\x2', '\x2', '\xA4', '\xA5', 
		'\a', '\x12', '\x2', '\x2', '\xA5', '\xA6', '\x5', '\x10', '\t', '\x2', 
		'\xA6', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x10', 
		'\x2', '\x2', '\xA8', '\xA9', '\a', '\x13', '\x2', '\x2', '\xA9', '\xAA', 
		'\x5', '\x10', '\t', '\x2', '\xAA', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xAC', '\a', '\x10', '\x2', '\x2', '\xAC', '\xAD', '\a', '\x14', 
		'\x2', '\x2', '\xAD', '\xAE', '\x5', '\x10', '\t', '\x2', '\xAE', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xB1', '\x5', '\"', '\x12', '\x2', 
		'\xB0', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '!', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB5', '\x5', '\x44', '#', '\x2', '\xB5', '\xB6', '\a', '\x15', '\x2', 
		'\x2', '\xB6', '\xB7', '\t', '\x2', '\x2', '\x2', '\xB7', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x10', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', '\x16', '\x2', '\x2', '\xBA', '\xBB', '\x5', '\x10', '\t', 
		'\x2', '\xBB', '%', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', 
		'\xE', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x17', '\x2', '\x2', '\xBE', 
		'\xC0', '\a', '\x6', '\x2', '\x2', '\xBF', '\xC1', '\x5', '(', '\x15', 
		'\x2', '\xC0', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC5', '\a', '\a', '\x2', '\x2', '\xC5', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC7', '\a', '\xE', '\x2', '\x2', '\xC7', 
		'\xC8', '\x5', '\x46', '$', '\x2', '\xC8', '\xCA', '\a', '\x6', '\x2', 
		'\x2', '\xC9', '\xCB', '\x5', '*', '\x16', '\x2', '\xCA', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCE', '\x5', '\x1C', '\xF', 
		'\x2', '\xCD', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD1', '\x5', '\x1E', '\x10', '\x2', '\xD0', '\xD2', '\x5', ' ', '\x11', 
		'\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD5', '\x5', '$', '\x13', '\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD7', '\a', '\a', '\x2', '\x2', '\xD7', 
		')', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', '\x10', '\x2', 
		'\x2', '\xD9', '\xDA', '\a', '\x18', '\x2', '\x2', '\xDA', '\xDB', '\x5', 
		'\x10', '\t', '\x2', '\xDB', '+', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xDD', '\a', '\xE', '\x2', '\x2', '\xDD', '\xDE', '\a', '\x19', '\x2', 
		'\x2', '\xDE', '\xDF', '\a', '\x6', '\x2', '\x2', '\xDF', '\xE0', '\x5', 
		'.', '\x18', '\x2', '\xE0', '\xE1', '\a', '\a', '\x2', '\x2', '\xE1', 
		'-', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', '\x5', '\x30', '\x19', 
		'\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xE8', '\a', '\x1A', '\x2', '\x2', '\xE8', '\xE9', '\x5', 
		'\x46', '$', '\x2', '\xE9', '\xEA', '\a', '\x6', '\x2', '\x2', '\xEA', 
		'\xEB', '\x5', '\x32', '\x1A', '\x2', '\xEB', '\xEC', '\a', '\a', '\x2', 
		'\x2', '\xEC', '\x31', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEF', '\x5', 
		'\x34', '\x1B', '\x2', '\xEE', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF3', '\x5', '\x36', '\x1C', '\x2', '\xF3', 
		'\xF4', '\x5', '\x46', '$', '\x2', '\xF4', '\xF6', '\a', '\b', '\x2', 
		'\x2', '\xF5', '\xF7', '\x5', '\x38', '\x1D', '\x2', '\xF6', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\a', '\t', '\x2', 
		'\x2', '\xF9', '\x35', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFD', '\x5', 
		'<', '\x1F', '\x2', '\xFB', '\xFD', '\a', '\x1B', '\x2', '\x2', '\xFC', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\x37', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x103', '\x5', 
		':', '\x1E', '\x2', '\xFF', '\x100', '\a', '\f', '\x2', '\x2', '\x100', 
		'\x102', '\x5', ':', '\x1E', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x105', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x39', '\x3', '\x2', '\x2', '\x2', '\x105', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x107', '\x5', '<', '\x1F', '\x2', '\x107', 
		'\x108', '\x5', 'H', '%', '\x2', '\x108', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x10A', '\b', '\x1F', '\x1', '\x2', '\x10A', '\x10E', '\x5', 
		'>', ' ', '\x2', '\x10B', '\x10E', '\x5', '@', '!', '\x2', '\x10C', '\x10E', 
		'\x5', '\x44', '#', '\x2', '\x10D', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x116', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x110', '\f', '\x3', '\x2', '\x2', '\x110', '\x111', '\a', '\n', '\x2', 
		'\x2', '\x111', '\x112', '\x5', '\x42', '\"', '\x2', '\x112', '\x113', 
		'\a', '\v', '\x2', '\x2', '\x113', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x115', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x114', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x117', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', 
		'\t', '\x3', '\x2', '\x2', '\x11A', '?', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x11C', '\x5', '>', ' ', '\x2', '\x11C', '\x11D', '\a', '\"', '\x2', 
		'\x2', '\x11D', '\x41', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x123', 
		'\x5', '<', '\x1F', '\x2', '\x11F', '\x120', '\a', '\f', '\x2', '\x2', 
		'\x120', '\x122', '\x5', '<', '\x1F', '\x2', '\x121', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\x125', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x124', '\x43', '\x3', '\x2', '\x2', '\x2', '\x125', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x126', '\x12B', '\x5', '\x46', '$', '\x2', 
		'\x127', '\x128', '\a', '\r', '\x2', '\x2', '\x128', '\x12A', '\x5', '\x46', 
		'$', '\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'\x12F', '\t', '\x4', '\x2', '\x2', '\x12F', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x131', '\a', '$', '\x2', '\x2', '\x131', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', 'N', 'X', '^', '\x61', '\x64', 'q', 'y', 
		'\x80', '\x8B', '\x93', '\x96', '\x99', '\x9C', '\x9F', '\xB2', '\xC2', 
		'\xCA', '\xCD', '\xD1', '\xD4', '\xE5', '\xF0', '\xF6', '\xFC', '\x103', 
		'\x10D', '\x116', '\x123', '\x12B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace OffSync.Apps.Codegen.Infra.PlantUml.Antlr
